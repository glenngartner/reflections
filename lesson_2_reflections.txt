What happens when you initialize a repository? Why do you need to do it?

A new project space, or directory, is initialized as a git version controlled repository. Meta data is created, particularly a .Git folder, containing information about the repo (history, file names, etc). 

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area can hold any files selected by the "add" command. It can be less than the number of files in the working directory, but not more. The repository contains the files that are committed after an add, not necessarily all the files in the working directory. 

How can you use the staging area to make sure you have one commit per logical change?

You can do a diff on the file in your working directory, and the file in the stage, before you commit. In reviewing the changes, you can confirm its one logical change. 

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

When you want to experiment with a new feature, but keep a stable version available, when needed. Branches allow you to safely change code, without compromising the integrity of the master branch, or creating complex commits or rolling back into history, to undo changes you don't want. 

How do the diagrams help you visualize the branch structure?

It's easy to see where commits branch, and how the git log will display commits. 

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

All past commits for each branch are merged together, and sorted by time stamp. The digrams show two branches joining again, as it's supposed to. 

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Automatic merges save time, and are low risk (code should still run/compile). Manual merging takes more time, but is necessary when conflicts aren't clear for Git. Humans, particularly those writing the code, should confirm the final merge, to ensure the program still runs. 